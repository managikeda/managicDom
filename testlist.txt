＜Todo＞
・StatusBarの機能テスト

＜プロンプトメモ＞

添付のmanagic_dom.jsとmanagic_ui.jsをもとに、
学習ゲームでユーザーがプレイするジャンルやユニットを選択するシーンを作るMenuSceneクラスを作成します。
以下は、MenuSceneクラスの概要です。これをもとにMenuSceneクラスの要件定義を提示してください。
補足が必要な情報があればたずねてください。

想定ユーザーと基本操作：
ユーザーとしては小学校低学年から、中学生までを想定します。
基本操作としては、クリックおよびタッチ操作を想定します。

ユーザーが行う選択：
ユーザーは、下記を例とする１～数段階の選択を行う
パターン１：教科の選択、単元の選択
パターン２：教科の選択、単元の選択、問題難度の選択、出題数の選択
パターン３：ダンジョンの選択、フロアの選択
パターン４：敵キャラクターの選択
パターン５：レベルの選択
戻る：ひとつまえの選択に戻る。または最初の選択に戻る。

ユーザーによる選択完了後の処理：
ユーザーが行った各選択の情報を引数として保持して次のシーンへ進む。

MenuSceneクラスを構成する主な既存のコンポーネント:
※MenuSceneクラスはSceneクラスを継承する
UIButton
Label
LabelArea
Sprite
CharSprite
StatusBar(進捗や達成状況を表示する)
FrameWindow
AnimatedCover（選択受付時の演出など）

その他：
ボタンはユーザーによる連打などによる不正操作を防ぐように制御する。






＜追加したい機能＞
・Labelのfontプロパティ関連
    ・フォントの名称だけの指定で（予め選ばれた範囲から）google fontを適用できるようにする

index.htmlの冒頭付近に記述のように、loadGoogleFont関数を使って使用したいフォントを予め読み込み、
それを用いるという場合のサンプルコードも提示してください。


・QuestionUIクラスの追加
    ・配下に、FrameWindow, LabelArea, UIButton等を配置する
    ・QuestionControllerからの指示により問題文と選択肢を表示する
    ・選択肢(UIButton)を押すとQuestionControllerに結果を通知する
    　(通知後、次の問題が表示されるまで、押しても無反応)
    ・採点結果をQuestionControllerから受け取って表示する
    　(採点結果は、選択肢脇に〇×アイコンで表示する)

・QuestionControllerクラスの追加
    ・QuestionUI, BattleControllerと連携して以下の業務を遂行する
    　・出題範囲となる問題ユニットデータの取得
    　・出題順のシャッフルや再出題の優先度制御
    　・問題文と選択肢の表示
    　・問題の採点
    　・単問あたり採点結果の表示
    　・ユニット終了後の採点結果表示
    ※それぞれの業務は関連関数の上書きにより柔軟に編集可能

・BattleControllerクラスの追加
    ・ユニット開始（バトル関連）、バトル進行、ユニット終了（バトル関連）を制御する
    　・プレイヤーおよび敵キャラクターのステータスを取得、設定
    　・CharaSprite, StatusBar, AnimatedCover等の生成と配置
    
    ・QuestionControllerと連携して以下の業務を遂行する
    　・ユニット開始前の準備
    　・ユニット終了後の結果表示

    ※それぞれの業務は関連関数の上書きにより柔軟に編集可能

    

＜既知の問題＞

＜要テスト＞

＜対応済み＞



＜note用メモ＞

いつかぶっ潰してやりたいと思っていたやつが、目の前で想定外のヤツに殺られてしまっていた。
そんな「ヴィンランド・サガ」8巻あたりのトルフィンみたいな状態になってしまった・・・。

ガイシャは「受験勉強（的な知性）」で、犯人はもちろんAI（LLM）である。

現場のメジャーなAIモデルたち、
膨大すぎる程の知識を蓄え、これまでに人類が解いてきたほとんどの問題の解法を知っている彼らは、
まさに「究極の受験生」であり、受験勉強的な知性の完成形であると言って良い。

